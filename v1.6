
#include <GL/freeglut.h>
#include <cmath>
#include <vector>
#include <string>
#include <map>
#include <ctime>
#include <cstdlib>

float cameraAngleX = 30.0f;
float cameraAngleY = 45.0f;
float cameraDistance = 20.0f;

int lastMouseX, lastMouseY;
bool leftMousePressed = false;

std::string axiom = "F";
std::map<char, std::string> rules;
std::string lsystemString;
int lsystemDepth = 3; // početna dubina
float branchAngle = 30.0f; // ugao grananja

struct Vec3 {
    float x, y, z;
};

std::vector<Vec3> treePositions;

std::string generateLSystem(const std::string& axiom, int depth) {
    std::string current = axiom;
    for (int i = 0; i < depth; ++i) {
        std::string next;
        for (size_t j = 0; j < current.length(); ++j) {
            char c = current[j];
            if (rules.find(c) != rules.end())
                next += rules[c];
            else
                next += c;
        }
        current = next;
    }
    return current;
}

void regenerateLSystem() {
    lsystemString = generateLSystem(axiom, lsystemDepth);
}

void drawTree(const std::string& lsys) {
    glPushMatrix();
    float segmentLength = 1.0f;
    float thickness = 0.1f;
    int depth = 0;

    for (size_t i = 0; i < lsys.length(); ++i) {
        char c = lsys[i];
        switch (c) {
            case 'F':
                // Crtanje segmenta sa debljinom
                glPushMatrix();
                glScalef(thickness, segmentLength, thickness);
                glutSolidCube(1.0f);
                glPopMatrix();
                glTranslatef(0.0f, segmentLength, 0.0f);
                // Smanjujemo debljinu sa visinom
                thickness *= 0.8f;
                segmentLength *= 0.9f;
                break;
            case '+': glRotatef(branchAngle, 0.0f, 0.0f, 1.0f); break;
            case '-': glRotatef(-branchAngle, 0.0f, 0.0f, 1.0f); break;
            case '&': glRotatef(branchAngle, 1.0f, 0.0f, 0.0f); break;
            case '^': glRotatef(-branchAngle, 1.0f, 0.0f, 0.0f); break;
            case '\\': glRotatef(branchAngle, 0.0f, 1.0f, 0.0f); break;
            case '/': glRotatef(-branchAngle, 0.0f, 1.0f, 0.0f); break;
            case '|': glRotatef(180.0f, 0.0f, 0.0f, 1.0f); break;
            case '[':
                glPushMatrix();
                depth++;
                break;
            case ']':
                glPopMatrix();
                depth--;
                // Vraćamo debljinu na prethodnu vrednost
                thickness = 0.1f * powf(0.8f, depth);
                segmentLength = 1.0f * powf(0.9f, depth);
                break;
        }
    }
    glPopMatrix();
}


void init() {
    glClearColor(0.5f, 0.8f, 1.0f, 1.0f);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    // Osvetljenje
    GLfloat lightPos[] = {5.0f, 10.0f, 5.0f, 1.0f};
    GLfloat lightDiffuse[] = {1.0f, 1.0f, 1.0f, 1.0f};
    GLfloat lightAmbient[] = {0.3f, 0.3f, 0.3f, 1.0f};
    glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient);

    // Kompleksnije 3D pravilo za boljу krošnju
    rules['F'] = "FF[+++&F][---&F][++\\F][--\\F][+&F][-&F][&+F][&-F]";

    regenerateLSystem();

    srand((unsigned int)time(0));
    for (int i = 0; i < 20; ++i) {
        float x = (rand() % 200 - 100) / 10.0f;
        float z = (rand() % 200 - 100) / 10.0f;
        treePositions.push_back({x, 0.0f, z});
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    float camX = cameraDistance * sinf(cameraAngleY * 3.14f / 180.0f) * cosf(cameraAngleX * 3.14f / 180.0f);
    float camY = cameraDistance * sinf(cameraAngleX * 3.14f / 180.0f);
    float camZ = cameraDistance * cosf(cameraAngleY * 3.14f / 180.0f) * cosf(cameraAngleX * 3.14f / 180.0f);

    gluLookAt(camX, camY, camZ, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    // Teren
    glColor3f(0.3f, 0.8f, 0.3f);
    glBegin(GL_QUADS);
        glVertex3f(-10.0f, 0.0f, -10.0f);
        glVertex3f( 10.0f, 0.0f, -10.0f);
        glVertex3f( 10.0f, 0.0f,  10.0f);
        glVertex3f(-10.0f, 0.0f,  10.0f);
    glEnd();

    // Drveće sa materijalima
    GLfloat trunkDiffuse[] = {0.4f, 0.25f, 0.1f, 1.0f};
    GLfloat trunkSpecular[] = {0.1f, 0.1f, 0.1f, 1.0f};
    glMaterialfv(GL_FRONT, GL_DIFFUSE, trunkDiffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, trunkSpecular);
    glMaterialf(GL_FRONT, GL_SHININESS, 10.0f);

    for (size_t i = 0; i < treePositions.size(); ++i) {
        glPushMatrix();
        glTranslatef(treePositions[i].x, treePositions[i].y, treePositions[i].z);
        drawTree(lsystemString);
        glPopMatrix();
    }

    glutSwapBuffers();
}

void reshape(int w, int h) {
    if (h == 0) h = 1;
    float ratio = (float)w / (float)h;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45, ratio, 1, 1000);
    glViewport(0, 0, w, h);
    glMatrixMode(GL_MODELVIEW);
}

void motion(int x, int y) {
    if (leftMousePressed) {
        cameraAngleY += (x - lastMouseX);
        cameraAngleX += (y - lastMouseY);
        if (cameraAngleX > 89.0f) cameraAngleX = 89.0f;
        if (cameraAngleX < -89.0f) cameraAngleX = -89.0f;
    }

    lastMouseX = x;
    lastMouseY = y;

    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON) {
        leftMousePressed = (state == GLUT_DOWN);
        lastMouseX = x;
        lastMouseY = y;
    }
}

// UI meni (desni klik)
void menu(int option) {
    if (option == 1) branchAngle = 15.0f;
    else if (option == 2) branchAngle = 30.0f;
    else if (option == 3) branchAngle = 45.0f;
    else if (option == 4) branchAngle = 60.0f;
    else if (option == 10) lsystemDepth = 2;
    else if (option == 11) lsystemDepth = 3;
    else if (option == 12) lsystemDepth = 4;
    else if (option == 13) lsystemDepth = 5;

    regenerateLSystem();
    glutPostRedisplay();
}

void mouseWheel(int button, int dir, int x, int y) {
    if (dir > 0)
        cameraDistance -= 1.0f;
    else
        cameraDistance += 1.0f;

    if (cameraDistance < 2.0f) cameraDistance = 2.0f;
    if (cameraDistance > 100.0f) cameraDistance = 100.0f;

    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Projekat Petnica");

    init();

    // UI meni sa uglovima grananja
    glutCreateMenu(menu);
    glutAddMenuEntry("=== Ugao grananja ===", -1);
    glutAddMenuEntry("15 stepeni", 1);
    glutAddMenuEntry("30 stepeni", 2);
    glutAddMenuEntry("45 stepeni", 3);
    glutAddMenuEntry("60 stepeni", 4);
    glutAddMenuEntry("=== Dubina ===", -1);
    glutAddMenuEntry("Dubina 2", 10);
    glutAddMenuEntry("Dubina 3", 11);
    glutAddMenuEntry("Dubina 4", 12);
    glutAddMenuEntry("Dubina 5", 13);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutMotionFunc(motion);
    glutMouseWheelFunc(mouseWheel);

    glutMainLoop();
    return 0;
}
